/* ==========================================================================
   #MIXINS
   ========================================================================== */

// Responsive media query mixins.
@mixin phablet {

  @media screen and (min-width: $phablet-width) {
    @content;
  }

}

@mixin tablet {

  @media screen and (min-width: $tablet-width) {
    @content;
  }

}

@mixin desktop {

  @media screen and (min-width: $desktop-width) {
    @content;
  }

}

/**
 *	Font-size: create a fully formed type style (sizing and vertical rhythm) by passing in a
 * 	single value, e.g.:
 *
 * 	.foo {
 * 	    @include font-size(12px);
 * 	}
 *
 * 	This will generate a rem-based font-size with its pixel fallback, as well as
 * 	a unitless line-height which will place the element on your baseline, e.g.:
 *
 * 	.foo {
 * 	    font-size: 12px;
 * 	    font-size: 0.75rem;
 * 	    line-height: 2;
 * 	}
 *
 * 	If you do not want to generate a line-height automatically, you simply pass
 * 	in your own as a second paramater, e.g.:
 *
 * 	.foo {
 * 	    @include font-size(12px, 1.5);
 * 	}
 *
 * 	This will yield:
 *
 * 	.foo {
 * 	    font-size: 12px;
 * 	    font-size: 0.75rem;
 * 	    line-height: 1.5;
 * 	}
 *
 * 	This parameter can be any integer, ‘inherit’, or ‘normal’.
 *
 * 	If you don’t want a line-height at all, pass in a second paramater of ‘none’
 * 	or ‘false’, e.g.:
 *
 * 	.foo {
 * 	    @include font-size(12px, none);
 * 	}
 *
 * 	This will yield:
 *
 * 	.foo {
 * 	    font-size: 12px;
 * 	    font-size: 0.75rem;
 * 	}
 *
 */
@mixin font-size($font-size, $line-height: "auto", $important: false) {

  @if ($important == "important") {
    $important: unquote("!important");
  } @else {
    $important: null;
  }

  font-size: $font-size $important;
  font-size: ($font-size / $base-font-size) * 1rem $important;

  @if $line-height == "auto" {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }

  @else {

    @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
      line-height: $line-height $important;
    }

    @elseif ($line-height != none and $line-height != false) {
      @warn "‘#{$line-height}’ is not a valid value for `line-height`.";
    }

  }

}

/**
 * Create fluid type with min and max sizes.
 * Modified version from: https://blog.codepen.io/2016/10/31/fluid-type-blogs/
 *
 * $min_width: 320px;
 * $max_width: 1200px;
 * $min_font: 16px;
 * $max_font: 24px;
 *
 * .usage {
 *   @include fluid-type($min_width, $max_width, $min_font, $max_font);
 *
 */
 @mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size, $important: false) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if ($important == "important") {
    $important: unquote("!important");
  } @else {
    $important: null;
  }

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {

      font-size: $min-font-size $important;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})) $important;
      }

      @media screen and (min-width: $max-vw) {
        font-size: rem-calc($max-font-size) $important;
      }
    }
  }
}

/**
 * 	Mixin to drop micro clearfix into a selector.
 *
 * 	.usage {
 * 	  @include clearfix;
 * 	}
 */
@mixin clearfix {

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear:both;
  }

}

/**
 *  Mixin to stretch an element across its parent.
 *
 *  .parent {
 *      position: relative;
 *  }
 *
 *  .cover {
 *      @include cover;
 *  }
 */
@mixin cover {
  bottom: 0;
  height: 100%;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
}

@mixin gridWithFallback {
  display: flex;
  flex-wrap: wrap;

  @supports (display: grid) {
    display: grid;
  }
}
